{
  "name": "scribe-plume-mimir",
  "version": "1.0.0",
  "description": "AI-powered knowledge management system with intelligent agents",
  "private": true,
  "author": "EMPYR Team - Leo Architect",
  "license": "UNLICENSED",
  "repository": {
    "type": "git",
    "url": "https://github.com/username/SCRIBE.git"
  },
  "keywords": [
    "ai",
    "knowledge-management",
    "agents",
    "langgraph",
    "autogen",
    "rag",
    "claude",
    "nextjs",
    "fastapi"
  ],
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0",
    "python": ">=3.11.0"
  },
  "scripts": {
    "dev": "concurrently \"npm run dev:frontend\" \"npm run dev:backend\"",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && uvicorn main:app --reload",
    "build": "npm run build:frontend && npm run build:backend",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "cd backend && echo 'Backend build completed'",
    "test": "npm run test:frontend && npm run test:backend",
    "test:frontend": "cd frontend && npm test",
    "test:backend": "cd backend && python -m pytest",
    "test:db": "cd database && python test_connection.py",
    "lint": "npm run lint:frontend && npm run lint:backend",
    "lint:frontend": "cd frontend && npm run lint",
    "lint:backend": "cd backend && black . && isort .",
    "docker:dev": "docker-compose up -d",
    "docker:prod": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d",
    "setup": "npm run setup:frontend && npm run setup:backend",
    "setup:frontend": "cd frontend && npm install",
    "setup:backend": "cd backend && pip install -r requirements.txt",
    "clean": "rm -rf frontend/.next frontend/out backend/__pycache__ **/*.pyc",
    "agent": "python run_scribe.py agent",
    "deploy:staging": "python run_scribe.py deploy --env staging",
    "deploy:prod": "python run_scribe.py deploy --env prod"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "nodemon": "^3.0.2",
    "typescript": "^5.9.2"
  },
  "config": {
    "frontend_port": 3000,
    "backend_port": 8000,
    "api_prefix": "/api/v1"
  }
}
