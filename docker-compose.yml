# Docker Compose for Plume & Mimir development environment
version: '3.8'

services:
  # =============================================================================
  # Backend API Service
  # =============================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: plume-mimir-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=DEBUG
    env_file:
      - .env
    volumes:
      - ./backend:/app/backend:ro  # Read-only for security
      - ./database:/app/database:ro
      - /app/backend/__pycache__  # Anonymous volume for cache
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - plume-mimir-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Redis Cache Service
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: plume-mimir-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - plume-mimir-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =============================================================================
  # Frontend Development Server (optional - can be run separately)
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: plume-mimir-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    env_file:
      - .env
    volumes:
      - ./frontend:/app:ro
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - plume-mimir-network
    profiles:
      - frontend  # Only start when explicitly requested

  # =============================================================================
  # Nginx Reverse Proxy (for production-like setup)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: plume-mimir-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates if available
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - plume-mimir-network
    profiles:
      - nginx  # Only start when explicitly requested

# =============================================================================
# Networks
# =============================================================================
networks:
  plume-mimir-network:
    driver: bridge
    name: plume-mimir-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  redis-data:
    name: plume-mimir-redis-data

# =============================================================================
# Development Profiles
# =============================================================================
# Usage examples:
#
# Start backend + redis only:
# docker-compose up backend redis
#
# Start with frontend:
# docker-compose --profile frontend up
#
# Start everything (including nginx):
# docker-compose --profile frontend --profile nginx up
#
# Development with file watching:
# docker-compose up backend redis
# (then run frontend separately with: cd frontend && npm run dev)
#
# Production-like setup:
# docker-compose --profile frontend --profile nginx up -d